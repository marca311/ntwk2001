#!/bin/bash
# create_sums
# Created by Marcus Dyck 20 Nov 2014
# This script backs up the files specified in the filelist and encrypts the backups. It also creates checksums of all the files and encrypts that too.
# Last modified on 27 Nov 2014

# Hashing algorithms are used to verify files 
# sha-512 is a hashing algorithm that generates a hash based on file contents and metadata.
# I am using it for a combination of speed and security. It is more secure and faster than sha-256.

# aes-256-cbc is an encryption algorithm that uses a combination of 256-bit aes encryption and cbc.
# Advanced Encryption Standard (AES) a type of encryption that focuses on a high amount of encryption with a low amount of system power.
# It has a several step process that includes the following:
# Replacing every byte using a lookup table, shifting bytes a certain number of steps, and shifing columns of bytes.
# CBC encryption is an extra step applied to the AES encryption that runs the data of the previous block through the encryption for the next block.
# This means that the encryption is always random in appearance and will be much harder to crack as opposed to ECB encryption.
# ECB Encryption uses keys to change the bytes in the file, however it can use a similar code for duplicate sections of bytes.

# Make sure only root can run the script
# Credit to http://www.cyberciti.biz/tips/shell-root-user-check-script.html
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 2
fi

# Gets the configuration information
config_file=`cat /etc/myproject_config`
checksum_directory=`echo "$config_file" | grep checksum_directory | cut -d ":" -f 2`
backup_directory=`echo "$config_file" | grep backup_directory | cut -d ":" -f 2`
install_directory=`echo "$config_file" | grep install_directory | cut -d ":" -f 2`

# Runs the encryption library chock full of functions
. "$install_directory/ntwk2001_encrypt"

# Prompts the user with a yes/no question
# Syntax: prompt_yes_no [question]
# Returns: confirmed (boolean)
function prompt_yes_no() {
    echo -n -e $1 "(y/n): "
    read answer
    # Credit to https://stackoverflow.com/questions/2264428/converting-string-to-lower-case-in-bash-shell-scripting
    answer=`echo $answer | tr '[:upper:]' '[:lower:]'` # Makes the result lower case
    if [ -z $answer ]
    then
        echo "Please enter y or n."
        repeat=true
    else
        if [ $answer == "y" ]
        then
            confirmed=true
            repeat=false
        elif [ $answer == "n" ]
        then
            confirmed=false
            repeat=false
        else
            echo "Please enter y or n."
            repeat=true
        fi
    fi
}

# Prompts the user for a value and can default if nothing is entered.
# Syntax: prompt_value[question] [default value]
function prompt_value() {
    if [ -z $2 ]
    then
        echo -n $1
        read result
    fi
    echo -n $1 "[default: $2]: "
    read result
    if [ -z $result ]
    then
        echo "Using the default of $2"
        result=$2
    fi
}

# Backs up and encrypts the specified file(s)
# Syntax: backup_and_encrypt_file [file or wildcard]
function backup_and_encrypt_file() {
    if [ -e $1 ]
    then
        # Runs the contents of the file through encryption and puts them into the backup destination
        cat $1 | encrypt > "$backup_directory/$(basename $1)"
        # Change permissions of new backup file
        chmod 600 "$backup_directory/$(basename $1)"
        # Create a checksum of the file and encrypt the checksum
        checksums=$checksums"\n"`checksum $1`
    else
        echo -e "The file \"$1\" does not exist."
    fi
}

### Main script thread ###
# The folder check is no longer here, it is in the install script now.
# Prompt the user for a encryption key. Defaults to openssl random key.
repeat=true
while $repeat
do
    echo -n "Enter a key for encryption purposes [default: randomly generated]: "
    read -s key
    if [ -z $key ]
    then
        # Generate a random key using openssl if the user does not enter one.
        echo "Randomly generating a key..."
        key=`openssl rand -base64 33` # 33 chars is to prevent "=" for neatness.
        repeat=false
    else
        echo
        echo -n "Confirm the encryption key: "
        read -s key_confirm
        if [ "$key" != "$key_confirm" ]
        then
            # Note: You said that I was allowed to do this loop.
            echo
            echo "Those keys do not match, try again."
        else
            repeat=false
            # Wipe out the confirm variable
            key_confirm=""
        fi
    fi
done

# Write the key to file and set permissions
echo "$key" > /etc/sysconfig/bash_file_monitor
chown root:root /etc/sysconfig/bash_file_monitor
chmod 400 /etc/sysconfig/bash_file_monitor
# Wipe out the key variable
key=""

# Cycle through all files in the filelist
for NEXT in `cat "$checksum_directory/filelist.txt"`
do
    backup_and_encrypt_file "$NEXT"
done

# Save all the checksum information to file
echo -e "$checksums" | encrypt > "$checksum_directory/ntwk2001_checksums"
chmod 400 "$checksum_directory/ntwk2001_checksums"

# Start the service
systemctl start bash_file_monitor.service
