#!/bin/bash
# project_setup
# Created by Marcus Dyck 18 Oct 2014
# This script installs and removes all the files for the NTWK-2001 scripting project
# Exit codes:
# 1: No/Wrong arguments specified
# 2: Script was not run as root
# 3: "No" was specified when prompted to continue with install/removal
# 4: Uninstall failed because it could not find /etc/myproject_config
# Last modified on 26 Nov 2014

# Useful variables:
# confirmed (bool): Created by the confirm function and says whether the user decided to continue from the last prompt. (answered yes=true)

# Asks a yes or no question.
# Syntax: confirm [question]
# Returns: confirmed
function confirm() {
    repeat=true
    while $repeat
    do
        echo -n $1 "(y/n): "
        read answer
        # Credit to https://stackoverflow.com/questions/2264428/converting-string-to-lower-case-in-bash-shell-scripting
        answer=`echo $answer | tr '[:upper:]' '[:lower:]'` # Makes the result lower case
        if [ -z $answer ]
        then
            echo "Please enter y or n."
            repeat=true
        else
            if [ $answer == "y" ]
            then
                confirmed=true
                repeat=false
            elif [ $answer == "n" ]
            then
                confirmed=false
                repeat=false
            else
                echo "Please enter y or n."
                repeat=true
            fi
        fi
    done
}

# Prompts the user for a value.
# Syntax: prompt_value [question] [default value]
# Returns the variable "result"
function prompt_value() {
    echo -n $1 "[default: $2]: "
    read result
    if [ -z $result ]
    then
        echo "Using the default of $2"
        result=$2
    fi
}

# Prompts the user for a folder location and can default. Then confirms that either the folder should be created or used if it already exists.
# Syntax: prompt_for_folder [question] [default value]
function prompt_for_folder() {
    repeat=true
    while $repeat
    do
        prompt_value "$1" "$2"
        if [ -d $result ]
        then
            confirm "That folder already exists, are you sure you want to use it?"
            if $confirmed
            then
                repeat=false
            else
                # This else has to be here because I reuse the variable in the confirm method.
                repeat=true
            fi
        else
            confirm "That folder does not exist, do you want it to be created?"
            if $confirmed
            then
                repeat=false
            else
                # This else has to be here because I reuse the variable in the confirm method.
                repeat=true
            fi
        fi
    done
}

# Deletes the backup of the specified file
# Syntax: delete_backup_file [config file...]
function delete_backup_file() {
    # The for loop takes wildcards into account
    for next_file in $@
    do
        rm "$backup_directory/$(basename $next_file)"
    done
}

### Main script thread ###
# Show usage info if no argument is specified
if [ -z $@ ]
then
    echo 'Usage: project_setup {install|uninstall}'
    exit 1
fi

# Make sure only root can run the install script
# Credit to http://www.cyberciti.biz/tips/shell-root-user-check-script.html
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 2
fi

# Install argument handler
if [ $1 = "install" ]
then
    echo "This program will now create a configuration file and install"
    echo "the components of Marcus Dyck's scripting project into the"
    echo "specified locations."
    confirm "Do you wish to continue?"
    if $confirmed
    then
        echo "Installing..."
        # Prompt for various installation values
        prompt_value "Enter an admin email address" "root@localhost"
        email=$result
        prompt_value "Specify the installation directory" "/usr/sbin/"
        install_directory=$result
        prompt_for_folder "Specify the location for the checksums" "/var/lib/ntwk2001"
        checksum_directory=$result
        prompt_for_folder "Specify the location for the file backups" "/var/lib/ntwk2001/backups"
        backup_directory=$result
        prompt_value "Specify the frequency of file scans (in seconds)" "600"
        scan_freq=$result
        
        # Create the config file
        echo "email: $email" > /etc/myproject_config # Overwrite the config file if it already exists.
        echo "install_directory:$install_directory" >> /etc/myproject_config
        echo "checksum_directory:$checksum_directory" >> /etc/myproject_config
        echo "backup_directory:$backup_directory" >> /etc/myproject_config
        echo "scan_freq:$scan_freq" >> /etc/myproject_config
        chmod 744 /etc/myproject_config
        # Move the executables to the specified directory
        cp ./create_sums "$install_directory/create_sums"
        cp ./sum_test "$install_directory/sum_test"
        cp ./ntwk2001_encrypt "$install_directory/ntwk2001_encrypt"
        # Set execution permissions
        chmod 700 "$install_directory/create_sums"
        chmod 700 "$install_directory/sum_test"
        chmod 700 "$install_directory/ntwk2001_encrypt"
        # Move the service file to the correct directory
        cp ./bash_file_monitor.service /usr/lib/systemd/system/bash_file_monitor.service
        # Move the file list to the checksum directory
        cp ./filelist.txt "$checksum_directory/filelist.txt"
        # Create the checksum and backup directories if they don't exist. Also set their permissions.
        mkdir $checksum_directory 2> /dev/null
        mkdir $backup_directory 2> /dev/null
        chmod 600 $backup_directory
        
        # Run the create_sums script
        create_sums
    else
        # User did not go through with install
        exit 3
    fi
    
fi

# Uninstall argument handler
if [ $1 = "uninstall" ]
then
    echo "This program will now uninstall Marcus Dyck\'s scripting project."
    confirm "Do you wish to continue?"
    if $confirmed
    then
        echo "Removing..."
         # ADD ALL THIS AS WELL
         # Notes: check if the /var/lib/ntwk2001/* (or alt) directory is empty once all files are gone. If so, delete the folder.
         
         # Check if the config exists. If so, import it.
         if [ -e /etc/myproject_config ]
         then
            # Gets the configuration information
            config_file=`cat /etc/myproject_config`
            checksum_directory=`echo "$config_file" | grep checksum_directory | cut -d ":" -f 2`
            install_directory=`echo "$config_file" | grep install_directory | cut -d ":" -f 2`
            backup_directory=`echo "$config_file" | grep backup_directory | cut -d ":" -f 2`
            
            echo "Removing checksums..."
            rm "$checksum_directory/ntwk2001_checksums"
            echo "Removing backups..."
            for NEXT in `cat "$checksum_directory/filelist.txt"`
            do
                delete_backup_file "$NEXT"
            done
            echo "Removing file list..."
            rm "$checksum_directory/filelist.txt"
            echo "Removing executables..."
            rm "$install_directory/create_sums"
            rm "$install_directory/sum_test"
            echo "Remove systemd script..."
            rm "/usr/lib/systemd/system/bash_file_monitor.service"
            echo "Removing config..."
            rm "/etc/myproject_config"
            echo -e "\nDone!"
         else
            echo "Installed config does not exist. Uninstall failed."
            exit 4
         fi
    else
        # User did not go through with uninstall
        exit 3
    fi
fi
