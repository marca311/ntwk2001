#!/bin/bash
# sum_test
# Created by Marcus Dyck 20 Nov 2014
# This script checks the list of checksums and compares them to checksums of
# their originating files. If a checksum turns up different, fix the file and notify the admin.
# If the backup config has been modified, notify the admin and panic.
# Last modified on 27 Nov 2014


# Is called if the backup file has been modified in addition to the normal file
# Syntax: invalid_backup [normal file path] [expected checksum] [received checksum]
function invalid_backup() {
    # TIME TO PANIC! AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!!!!
    echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!!!!!!!!!!" >> /dev/null #surpress the feelings
    # But seriously, notify the admin and that's all we can do for now.
    file=`echo "$1"`
    correct_sum=`echo "$2"`
    wrong_sum=`echo "$3"`
    report_email=`echo "The backup for file" $ "has been modified."` | mail -s "Backup error" $email
    report_email=`echo "$report_email\nStats:"`
    report_email=`echo "$report_email\nCurrent Sum: $wrong_sum"`
    report_email=`echo "$report_email\nExpected Sum: $correct_sum"`
    report_email=`echo "$report_email\nFile Location: $file"`
    echo -e "$report_email" | mail -s "Backup file modified" $email
    # Write to server log
    echo -e "$report_email" | systemd-cat
}

# Is called if the file has been modified
# Syntax: invalid_sum [file path] [checksum]
function invalid_sum() {
    filedir=`dirname "$1"`
    filename=`basename "$1"`
    # Check whether the backup is fine
    file_path=`echo "$1"`
    file_sum=`echo "$2"`
    backup_sum=`cat "$backup_directory/$filename" | decrypt | checksum | cut -d " " -f 1`
    
    if [ "$backup_sum" != "$file_sum" ]
    then
        echo "Backup for $file_path has been modified"
        invalid_backup "$file_path"
    else
        mv "$file_path" "$filedir/$filename.wrong"
        cat "$backup_directory/$filename" | decrypt > "$file_path"
        # Email the admin
        report_email=`echo "One of the config files has been modified. The file has been restored from backup."`
        report_email=`echo "$report_email\nHere are the stats of the file:"`
        report_email=`echo "$report_email\nCurrent Sum: $file_sum"`
        report_email=`echo "$report_email\nNoted Sum: $backup_sum"`
        report_email=`echo "$report_email\nFilename: $file_path"`
        report_email=`echo "$report_email\nNew location of modified file: $filedir/$filename.wrong"`
        # Send the email
        echo -e "$report_email" | mail -s "Configuration file modified" $email
        # Write to system log
        echo -e "$report_email" | systemd-cat
    fi
}

# Checks the specified config file to see if it has been modified
# Syntax: [checksum line] > check_config_file
function check_config_file() {
    # Convert stdin to a variable
    line=`cat`
    # Turn all multiple spaces into one
    line=`echo "$line" | tr -s " "`
    # Split the checksum from the file
    file=`echo "$line" | cut -d " " -f 2`
    sum=`echo "$line" | cut -d " " -f 1`
    newsum=`checksum "$file" | cut -d " " -f 1`
    if [ "$newsum" != "$sum" ]
    then
        echo "$file Has been modified"
        invalid_sum "$file" "$sum"
    fi
}

### Main script thread ###

# Make sure only root can run the script
# Credit to http://www.cyberciti.biz/tips/shell-root-user-check-script.html
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 2
fi

# Load the config file
config_file=`cat /etc/myproject_config`
email=`echo "$config_file" | grep email | cut -d ":" -f 2`
checksum_directory=`echo "$config_file" | grep checksum_directory | cut -d ":" -f 2`
backup_directory=`echo "$config_file" | grep backup_directory | cut -d ":" -f 2`
install_directory=`echo "$config_file" | grep install_directory | cut -d ":" -f 2`
scan_freq=`echo "$config_file" | grep scan_freq | cut -d ":" -f 2`

# Load the encryption library
. $install_directory/ntwk2001_encrypt

# Load the checksum file
checksums=`cat "$checksum_directory/ntwk2001_checksums" | decrypt`

### Main loop ###
while true
do
    # Cycle through all files in the filelist
    while read NEXT
    do
        # Make sure the line isn't blank
        if [ "$NEXT" ]
        then
            echo "$NEXT" | check_config_file "$NEXT"
        fi
    done <<< "$checksums"
    # Sleeps inbetween scans
    sleep $scan_freq
done
